import globals from 'globals';
import js from '@eslint/js';
import tseslint from 'typescript-eslint';

export default tseslint.config(
  // Global ignores
  {
    ignores: ['node_modules/', 'dist/', 'eslint.config.js'],
  },

  // Base configuration for JS files (including eslint.config.js itself if not ignored)
  js.configs.recommended,

  // Base configuration for TS files (parser, plugin)
  {
    files: ['**/*.ts'], // Apply broadly first
    plugins: {
      '@typescript-eslint': tseslint.plugin,
    },
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        sourceType: 'module',
        ecmaVersion: 2022,
      },
      globals: {
        ...globals.node,
      },
    },
    rules: {
      'no-unused-vars': 'off', // Disable base rule for TS files
    },
  },

  // Recommended TS rules + Project-specific parsing for `src`
  {
    files: ['src/**/*.ts'], // Target only src files for project parsing
    languageOptions: {
      parserOptions: {
        project: true,
        tsconfigRootDir: import.meta.dirname,
      },
    },
    rules: {
      ...tseslint.configs.recommended.rules, // Apply recommended TS rules here
      'no-unused-vars': 'off', // Ensure base rule is off here too
      '@typescript-eslint/no-unused-vars': 'warn',
      '@typescript-eslint/no-explicit-any': 'error', // Keep explicit-any as error for src
    },
  },

  // Configuration for `src/types` directory (autogenerated files)
  {
    files: ['src/types/**/*.ts'],
    linterOptions: {
      reportUnusedDisableDirectives: false, // Disable warnings for unused eslint-disable comments
    },
    rules: {
      // You might also want to relax other rules here if needed for generated code
      // e.g., potentially turning off explicit-any if it causes issues here
      // '@typescript-eslint/no-explicit-any': 'off',
    },
  },

  // Configuration for `scripts` directory (no project parsing)
  {
    files: ['scripts/**/*.ts'],
    rules: {
      // Relax or adjust rules for scripts if needed, inherit base TS rules otherwise
      // For example, you might allow `any` more freely in scripts
      '@typescript-eslint/no-explicit-any': 'off', // Allow 'any' in scripts
      // Apply recommended TS rules here too, but without project-specific ones
      ...tseslint.configs.recommended.rules,
      'no-unused-vars': 'off', // Ensure base rule is off here too
      '@typescript-eslint/no-unused-vars': 'warn', // Keep TS rule (or adjust as needed for scripts)
    },
  },

  // Configuration specific to test files
  {
    files: ['src/tests/**/*.ts'],
    languageOptions: {
      globals: {
        ...globals.mocha,
      },
    },
    rules: {
      // Relax rules for tests if needed
      '@typescript-eslint/no-explicit-any': 'off', // Often useful to allow 'any' in tests
      '@typescript-eslint/no-unused-expressions': 'off', // Allow unused expressions like `expect(foo).to.be.true;`
      'no-unused-vars': 'off', // Ensure base rule is off here too
      '@typescript-eslint/no-unused-vars': 'warn', // Keep TS rule (or adjust as needed for tests)
    },
  }
);
